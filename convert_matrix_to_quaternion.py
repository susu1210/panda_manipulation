from math import *
def convertMatrix2Quaternion(R):
    tr = R[0][0] + R[1][1] + R[2][2]
    # Method 1
    # qw = sqrt(tr + 1) / 2.
    # qx = (R[2][1] - R[1][2]) / (4 * qw)
    # qy = (R[0][2] - R[2][0]) / (4 * qw)
    # qz = (R[1][0] - R[0][1]) / (4 * qw)

    # Method 2
    # qw = sqrt(tr + 1) / 2.
    # qx = (R[1][2] - R[2][1]) / (4 * qw)
    # qy = (R[2][0] - R[0][2]) / (4 * qw)
    # qz = (R[0][1] - R[1][0]) / (4 * qw)

    # Method 3
    # if tr > 0:
    #     S = sqrt(tr+1.0) * 2  # S=4 * qw
    #     qw = 0.25 * S
    #     qx = (R[2][1] - R[1][2]) / S
    #     qy = (R[0][2] - R[2][0]) / S
    #     qz = (R[1][0] - R[0][1]) / S
    # elif ((R[0][0] > R[1][1]) and (R[0][0] > R[2][2])) : #right
    #     S = sqrt(1.0 + R[0][0] - R[1][1] - R[2][2]) * 2  # S=4 * qx
    #     qw = (R[2][1] - R[1][2]) / S
    #     qx = 0.25 * S
    #     qy = (R[0][1] + R[1][0]) / S
    #     qz = (R[0][2] + R[2][0]) / S
    # elif (R[1][1] > R[2][2]) :
    #     if R[1][0]>0 or R[0][1]>0:
    #         if R[2][1]*R[1][2]>=0:
    #             S = sqrt(1.0 + R[1][1] - R[0][0] - R[2][2]) * 2  # S=4 * qy
    #         else:
    #             S = -sqrt(1.0 + R[1][1] - R[0][0] - R[2][2]) * 2
    #     else:
    #         if R[2][1] * R[1][2] >= 0:
    #             S = -sqrt(1.0 + R[1][1] - R[0][0] - R[2][2]) * 2  # S=4 * qy
    #         else:
    #             S = +sqrt(1.0 + R[1][1] - R[0][0] - R[2][2]) * 2
    #     qw = (R[0][2] - R[2][0]) / S
    #     qx = (R[0][1] + R[1][0]) / S
    #     qy = 0.25 * S
    #     qz = (R[1][2] + R[2][1]) / S
    # else:
    #     S = -sqrt(1.0 + R[2][2] - R[0][0] - R[1][1]) * 2  # S=4 * qz
    #     qw = (R[1][0] - R[0][1]) / S
    #     qx = (R[0][2] + R[2][0]) / S
    #     qy = (R[1][2] + R[2][1]) / S
    #     qz = 0.25 * S
    # return [qx,qy,qz,qw]

    # Method 4:
    # if (R[2][2] < 0) :
    #     if (R[0][0] > R[1][1]) :
    #         t = 1 + R[0][0] -R[1][1] -R[2][2]
    #         q =  [t, R[0][1]+R[1][0], R[2][0]+R[0][2], R[1][2]-R[2][1] ]
    #
    #     else:
    #         t = 1 -R[0][0] + R[1][1] -R[2][2]
    #         q =  [R[0][1]+R[1][0], t, R[1][2]+R[2][1], R[2][0]-R[0][2] ]
    #
    # else :
    #     if (R[0][0] < -R[1][1]) :
    #         t = 1 -R[0][0] -R[1][1] + R[2][2]
    #         q =  [R[2][0]+R[0][2], R[1][2]+R[2][1], t, R[0][1]-R[1][0] ]
    #
    #     else :
    #         t = 1 + R[0][0] + R[1][1] + R[2][2]
    #         q =  [R[1][2]-R[2][1], R[2][0]-R[0][2], R[0][1]-R[1][0], t ]
    #
    # q =[element * 0.5 / sqrt(t) for element in q]
    # return q
    # Method 5:
    if (R[2][2] < 0) :
        if (R[0][0] > R[1][1]) :
            t = 1 + R[0][0] -R[1][1] -R[2][2]
            q =  [t, R[0][1]+R[1][0], R[2][0]+R[0][2], R[2][1]-R[1][2] ]

        else:
            t = 1 -R[0][0] + R[1][1] -R[2][2]
            q =  [R[0][1]+R[1][0], t, R[1][2]+R[2][1], R[0][2]-R[2][0] ]

    else :
        if (R[0][0] < -R[1][1]) :
            t = 1 -R[0][0] -R[1][1] + R[2][2]
            q =  [R[2][0]+R[0][2], R[1][2]+R[2][1], t, R[1][0]-R[0][1] ]

        else :
            t = 1 + R[0][0] + R[1][1] + R[2][2]
            q =  [R[2][1]-R[1][2], R[0][2]-R[2][0], R[1][0]-R[0][1], t ]

    q =[element * 0.5 / sqrt(t) for element in q]
    return q

